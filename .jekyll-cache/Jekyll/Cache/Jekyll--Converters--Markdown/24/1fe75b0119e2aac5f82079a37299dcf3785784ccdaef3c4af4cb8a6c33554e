I"ï<h2 id="1build-the-project">1.Build the project</h2>
<p>Run <code class="language-plaintext highlighter-rouge">ng build</code> to build the client project. The build artifacts will be stored in the <code class="language-plaintext highlighter-rouge">dist/</code> directory. Use the <code class="language-plaintext highlighter-rouge">--prod</code> flag for a production build.</p>

<h2 id="2create-the-apps-on-azure">2.Create the apps on Azure.</h2>
<p>Deploy the dist folder to the web app. Make sure put the web.config file under the<code class="language-plaintext highlighter-rouge">wwwroot/</code> as well. Angular on azure need the web.config for routing or read json file(local run ng serve is different with using IIS,need to add web.config ).By the way, WebApp windows environment need add the node.js version app settings.</p>

<h2 id="3deploy-to-azure">3.Deploy to Azure</h2>

<h3 id="1-create-a-release-package">1) Create a Release Package</h3>

<p>Open your terminal and make sure youâ€™re in the right folder.</p>

<p>Run the following command to create a release package in a sub folder called publish:</p>

<p><code class="language-plaintext highlighter-rouge">dotnet publish -c Release -o ./publish</code></p>

<h3 id="2-copy-database-to-the-new-folder">2) Copy database to the new folder</h3>
<p>Copy-Paste your database, for example â€˜yourDb.dbâ€™, into the newly created â€˜publishâ€™ folder.</p>

<h3 id="3publish-to-azure">3)Publish to Azure</h3>
<p>There are few ways to publish to Azure.Choose anyone if you like.
I always use Visual Studio Code and have the Azure App Service extension.</p>

<h3 id="4-set-the-connection-string">4) Set the Connection String</h3>
<p>Once the app has been deployed to Azure, you set your connection string in the Azure App Service.</p>

<p>You can find the setting under  <code class="language-plaintext highlighter-rouge">_Settings -&gt; Configuration -&gt; Connection strings.</code>	There you create a new connection string</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	[
		{
		"name": "ConnectionStrings",
		"value": "{ \"DefaultConnection\": \"Data Source=yourDb.db;\" }",
		"type": "Custom",
		"slotSetting": true
		}
	]
</code></pre></div></div>

<h3 id="5-set-the-application-settings">5) Set the Application settings</h3>

<p>You can find the setting under _Settings -&gt; Configuration -&gt; Applications Settings</p>

<p>1&gt; Adding the settings to web apps for your related API address.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		[
			 {
				"name": "APIAddress",
				"value":"https://the related app address",
				"slotSetting": true
			 }
		]
</code></pre></div></div>

<p>2&gt; Adding <code class="language-plaintext highlighter-rouge">ASPNETCORE_DETAILEDERRORS = true</code> to show the errors.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		[
			 {
				"name": "ASPNETCORE_DETAILEDERRORS",
				"value": "true",
				"slotSetting": true
			 }
		]
</code></pre></div></div>

<p>3&gt; Adding the <code class="language-plaintext highlighter-rouge">ASPNETCORE_ENVIRONMENT = Development</code>. Restart the WebApp and then check to see if that works.</p>
:ET